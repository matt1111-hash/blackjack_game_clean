#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import os
import random
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout,
                             QHBoxLayout, QPushButton, QLabel, QFrame,
                             QGridLayout, QMessageBox, QInputDialog, QDialog,
                             QTabWidget)
from PyQt5.QtGui import QPixmap, QFont, QPalette, QColor
from PyQt5.QtCore import Qt, QSize, QTimer

class Card:
    def __init__(self, suit, value):
        self.suit = suit
        self.value = value

    def get_numeric_value(self):
        if self.value in ['J', 'Q', 'K']:
            return 10
        elif self.value == 'A':
            return 11  # Ez k√©s≈ëbb 1-re v√°ltozhat a j√°t√©kmenet sor√°n
        else:
            return int(self.value)

    def get_image_file(self):
        # Speci√°lis kezel√©s a figur√°s lapokhoz
        if self.value == 'J':
            file_value = 'jack'
        elif self.value == 'Q':
            file_value = 'queen'
        elif self.value == 'K':
            file_value = 'king'
        elif self.value == 'A':
            file_value = 'ace'
        else:
            file_value = self.value

        # Kisbet≈±sre alak√≠tjuk a suit-ot is, √©s alulvon√°ssal kapcsoljuk √∂ssze
        return f"cards/{file_value}_of_{self.suit.lower()}.png"

    def __str__(self):
        return f"{self.value} of {self.suit}"

class Deck:
    def __init__(self):
        self.cards = []
        self.create_deck()

    def create_deck(self):
        suits = ['hearts', 'diamonds', 'clubs', 'spades']
        values = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']

        for suit in suits:
            for value in values:
                self.cards.append(Card(suit, value))

        self.shuffle()

    def shuffle(self):
        random.shuffle(self.cards)

    def deal(self):
        if not self.cards:
            self.create_deck()
        return self.cards.pop()

class Hand:
    def __init__(self):
        self.cards = []
        self.is_active = True
        self.doubled = False
        self.bet = 0

    def add_card(self, card):
        self.cards.append(card)

    def calculate_value(self):
        value = 0
        aces = 0

        for card in self.cards:
            value += card.get_numeric_value()
            if card.value == 'A':
                aces += 1

        # Kezelni az √Åszokat, hogy ne legyen nagyobb az √©rt√©k 21-n√©l
        while value > 21 and aces > 0:
            value -= 10  # V√°ltoztatjuk az √Åsz √©rt√©k√©t 11-r≈ël 1-re
            aces -= 1

        return value

    def is_blackjack(self):
        return len(self.cards) == 2 and self.calculate_value() == 21

    def can_split(self):
        if len(self.cards) != 2:
            return False

        # K√©t azonos √©rt√©k≈± lap eset√©n lehet osztani
        return self.cards[0].value == self.cards[1].value or (
            self.cards[0].value in ['10', 'J', 'Q', 'K'] and
            self.cards[1].value in ['10', 'J', 'Q', 'K']
        )

    def can_double(self):
        # Csak akkor lehet dupl√°zni, ha 2 lap van √©s az √©rt√©k 9, 10 vagy 11
        value = self.calculate_value()
        return len(self.cards) == 2 and 9 <= value <= 11

class CardLabel(QLabel):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setMinimumSize(80, 120)
        self.setAlignment(Qt.AlignCenter)
        self.setStyleSheet("background-color: transparent;")

class HandWidget(QWidget):
    def __init__(self, parent=None, is_dealer=False):
        super().__init__(parent)
        self.is_dealer = is_dealer
        self.hand = Hand()

        # Layout l√©trehoz√°sa
        self.layout = QVBoxLayout(self)

        # K√©z c√≠me
        if self.is_dealer:
            self.title_label = QLabel("Oszt√≥ k√°rty√°i:")
        else:
            self.title_label = QLabel("J√°t√©kos k√°rty√°i:")
        self.title_label.setFont(QFont('Arial', 12, QFont.Bold))
        self.layout.addWidget(self.title_label)

        # √ârt√©k c√≠mke
        self.value_label = QLabel("√ârt√©k: 0")
        self.value_label.setFont(QFont('Arial', 10))
        self.layout.addWidget(self.value_label)

        # T√©t c√≠mke (csak j√°t√©kosn√°l)
        if not self.is_dealer:
            self.bet_label = QLabel("T√©t: 0 Ft")
            self.bet_label.setFont(QFont('Arial', 10))
            self.layout.addWidget(self.bet_label)

        # K√°rty√°k elrendez√©se
        self.cards_layout = QHBoxLayout()
        self.layout.addLayout(self.cards_layout)

        # J√°t√©kos gombok (csak j√°t√©kosn√°l)
        if not self.is_dealer:
            self.buttons_layout = QHBoxLayout()

            self.hit_button = QPushButton("K√©rek lapot")
            self.hit_button.setFont(QFont('Arial', 10))
            self.hit_button.setEnabled(False)

            self.stand_button = QPushButton("Meg√°llok")
            self.stand_button.setFont(QFont('Arial', 10))
            self.stand_button.setEnabled(False)

            self.double_button = QPushButton("Dupl√°z√°s")
            self.double_button.setFont(QFont('Arial', 10))
            self.double_button.setEnabled(False)

            self.split_button = QPushButton("Split")
            self.split_button.setFont(QFont('Arial', 10))
            self.split_button.setEnabled(False)

            self.buttons_layout.addWidget(self.hit_button)
            self.buttons_layout.addWidget(self.stand_button)
            self.buttons_layout.addWidget(self.double_button)
            self.buttons_layout.addWidget(self.split_button)

            self.layout.addLayout(self.buttons_layout)

    def clear(self):
        # K√°rty√°k t√∂rl√©se
        while self.cards_layout.count():
            item = self.cards_layout.takeAt(0)
            widget = item.widget()
            if widget:
                widget.deleteLater()

        # K√©z √∫jraind√≠t√°sa
        self.hand = Hand()

        # C√≠mk√©k friss√≠t√©se
        self.value_label.setText("√ârt√©k: 0")
        if not self.is_dealer:
            self.bet_label.setText("T√©t: 0 Ft")

            # Gombok letilt√°sa
            self.hit_button.setEnabled(False)
            self.stand_button.setEnabled(False)
            self.double_button.setEnabled(False)
            self.split_button.setEnabled(False)

    def update_display(self, reveal_dealer=False):
        # K√°rty√°k t√∂rl√©se
        while self.cards_layout.count():
            item = self.cards_layout.takeAt(0)
            widget = item.widget()
            if widget:
                widget.deleteLater()

        # K√°rty√°k megjelen√≠t√©se
        for i, card in enumerate(self.hand.cards):
            # Az oszt√≥n√°l a m√°sodik k√°rty√°t csak akkor mutatjuk, ha reveal_dealer=True
            if not self.is_dealer or i == 0 or reveal_dealer:
                card_label = self.create_card_label(card)
            else:
                card_label = self.create_card_back_label()
            self.cards_layout.addWidget(card_label)

        # √ârt√©k friss√≠t√©se
        if self.is_dealer and not reveal_dealer and len(self.hand.cards) > 1:
            # Csak az els≈ë lap √©rt√©k√©t mutatjuk az oszt√≥n√°l
            first_card_value = self.hand.cards[0].get_numeric_value()
            self.value_label.setText(f"√ârt√©k: {first_card_value}+?")
        else:
            value = self.hand.calculate_value()
            self.value_label.setText(f"√ârt√©k: {value}")

        # T√©t friss√≠t√©se (csak j√°t√©kosn√°l)
        if not self.is_dealer:
            self.bet_label.setText(f"T√©t: {self.hand.bet} Ft")

            # Split √©s Double gombok friss√≠t√©se
            self.update_buttons()

    def update_buttons(self):
        if not self.is_dealer and self.hand.is_active:
            self.hit_button.setEnabled(True)
            self.stand_button.setEnabled(True)

            # Double gomb csak akkor akt√≠v, ha lehet dupl√°zni
            self.double_button.setEnabled(self.hand.can_double())

            # Split gomb csak akkor akt√≠v, ha lehet splittelni
            self.split_button.setEnabled(self.hand.can_split())
        else:
            self.hit_button.setEnabled(False)
            self.stand_button.setEnabled(False)
            self.double_button.setEnabled(False)
            self.split_button.setEnabled(False)

    def create_card_label(self, card):
        card_label = CardLabel()
        card_image_path = card.get_image_file()

        # Ellen≈ërizz√ºk, hogy a k√°rtyak√©p l√©tezik-e
        if os.path.exists(card_image_path):
            pixmap = QPixmap(card_image_path)
            pixmap = pixmap.scaled(80, 120, Qt.KeepAspectRatio, Qt.SmoothTransformation)
            card_label.setPixmap(pixmap)
        else:
            # Ha nincs k√©p, akkor sz√∂veggel jelen√≠tj√ºk meg
            card_label.setText(str(card))
            card_label.setStyleSheet("background-color: white; color: black; border: 1px solid black;")

        return card_label

    def create_card_back_label(self):
        card_label = CardLabel()
        card_back_path = "cards/black_joker.png"  # Joker haszn√°lata k√°rtya h√°tlapk√©nt

        # Ellen≈ërizz√ºk, hogy a k√°rtyah√°t k√©p l√©tezik-e
        if os.path.exists(card_back_path):
            pixmap = QPixmap(card_back_path)
            pixmap = pixmap.scaled(80, 120, Qt.KeepAspectRatio, Qt.SmoothTransformation)
            card_label.setPixmap(pixmap)
        else:
            # Ha nincs k√©p, akkor egyszer≈± sz√∂veggel jelen√≠tj√ºk meg
            card_label.setText("üÇ†")
            card_label.setFont(QFont('Arial', 30))
            card_label.setStyleSheet("background-color: #0033cc; color: white; border: 1px solid black;")

        return card_label

class BlackjackGame(QMainWindow):
    def __init__(self):
        super().__init__()

        # J√°t√©k logikai v√°ltoz√≥k
        self.deck = Deck()
        self.dealer_hand = Hand()
        self.player_hands = []  # T√∂bb k√©z a split miatt
        self.active_hand_index = 0
        self.game_over = False
        self.player_money = 1000000
        self.current_bet = 0

        # Ellen≈ërizz√ºk, hogy a k√°rty√°k k√©pei el√©rhet≈ëk-e
        self.check_card_images()

        # UI be√°ll√≠t√°sa
        self.init_ui()

    def check_card_images(self):
        cards_dir = "cards"
        if not os.path.exists(cards_dir):
            os.makedirs(cards_dir)
            QMessageBox.warning(self, "Figyelmeztet√©s",
                               "A k√°rtyak√©pek mapp√°ja hi√°nyzik. K√©rlek, t√∂ltsd le √©s helyezd a 'cards' mapp√°ba a megfelel≈ë k√©peket!")

    def create_new_hand(self):
        # √öj k√©ztart√≥ widget l√©trehoz√°sa
        hand_widget = HandWidget()

        # Aktu√°lis fogad√°s be√°ll√≠t√°sa
        hand_widget.hand.bet = self.current_bet

        # Kezek list√°j√°hoz ad√°s (FONTOS: ez legyen el≈ëbb!)
        self.player_hands.append(hand_widget)

        # Az aktu√°lis k√©z index√©nek meghat√°roz√°sa
        hand_index = len(self.player_hands) - 1

        # Gomb esem√©nyek be√°ll√≠t√°sa
        hand_widget.hit_button.clicked.connect(lambda checked=False, idx=hand_index: self.hit(idx))
        hand_widget.stand_button.clicked.connect(lambda checked=False, idx=hand_index: self.stand(idx))
        hand_widget.double_button.clicked.connect(lambda checked=False, idx=hand_index: self.double_down(idx))
        hand_widget.split_button.clicked.connect(lambda checked=False, idx=hand_index: self.split(idx))

        # Tab hozz√°ad√°sa
        self.hands_tab.addTab(hand_widget, f"K√©z {hand_index + 1}")

        return hand_widget

    def init_ui(self):
        # Ablak be√°ll√≠t√°sa
        self.setWindowTitle("Blackjack")
        self.setMinimumSize(1000, 700)  # Megn√∂velt m√©ret

        # Sz√≠ns√©m√°k be√°ll√≠t√°sa
        self.set_color_scheme()

        # K√∂zponti widget
        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        # F≈ë elrendez√©s
        main_layout = QVBoxLayout(central_widget)

        # Fels≈ë inform√°ci√≥s panel
        info_panel = QFrame()
        info_panel.setFrameShape(QFrame.StyledPanel)
        info_layout = QHBoxLayout(info_panel)

        # P√©nz √©s t√©t megjelen√≠t√©se
        self.money_label = QLabel(f"P√©nz: {self.player_money} Ft")
        self.money_label.setFont(QFont('Arial', 12, QFont.Bold))
        self.bet_label = QLabel(f"T√©t: {self.current_bet} Ft")
        self.bet_label.setFont(QFont('Arial', 12, QFont.Bold))

        info_layout.addWidget(self.money_label)
        info_layout.addWidget(self.bet_label)

        main_layout.addWidget(info_panel)

        # Dealer k√°rty√°i
        dealer_frame = QFrame()
        dealer_frame.setFrameShape(QFrame.StyledPanel)
        dealer_layout = QVBoxLayout(dealer_frame)

        self.dealer_widget = HandWidget(is_dealer=True)
        dealer_layout.addWidget(self.dealer_widget)

        main_layout.addWidget(dealer_frame)

        # J√°t√©kos k√°rty√°i - TabWidget a split kezekhez
        self.hands_tab = QTabWidget()
        self.hands_tab.setTabPosition(QTabWidget.South)

        # F≈ë k√©z l√©trehoz√°sa
        self.create_new_hand()

        main_layout.addWidget(self.hands_tab)

        # Gombok panel
        buttons_panel = QFrame()
        buttons_layout = QHBoxLayout(buttons_panel)

        # St√≠lusok az olvashat√≥bb sz√∂vegek√©rt
        button_style = """
        QPushButton {
            background-color: #0066cc;
            color: white;
            padding: 8px 12px;
            border-radius: 4px;
            font-weight: bold;
        }
        QPushButton:hover {
            background-color: #0055aa;
        }
        QPushButton:disabled {
            background-color: #cccccc;
            color: #666666;
        }
        """

        self.bet_button = QPushButton("T√©t")
        self.bet_button.setFont(QFont('Arial', 12))
        self.bet_button.clicked.connect(self.place_bet)

        self.deal_button = QPushButton("Oszt√°s")
        self.deal_button.setFont(QFont('Arial', 12))
        self.deal_button.clicked.connect(self.deal_cards)
        self.deal_button.setEnabled(False)

        self.new_game_button = QPushButton("√öj j√°t√©k")
        self.new_game_button.setFont(QFont('Arial', 12))
        self.new_game_button.clicked.connect(self.new_game)

        self.bet_button.setStyleSheet(button_style)
        self.deal_button.setStyleSheet(button_style)
        self.new_game_button.setStyleSheet(button_style)

        buttons_layout.addWidget(self.bet_button)
        buttons_layout.addWidget(self.deal_button)
        buttons_layout.addWidget(self.new_game_button)

        main_layout.addWidget(buttons_panel)

        # Eredm√©ny c√≠mke
        self.result_label = QLabel("")
        self.result_label.setAlignment(Qt.AlignCenter)
        self.result_label.setFont(QFont('Arial', 14, QFont.Bold))
        main_layout.addWidget(self.result_label)

        # St√°tusz s√°v
        self.statusBar().showMessage("Helyezz t√©tet a j√°t√©k ind√≠t√°s√°hoz!")

    def set_color_scheme(self):
        # Z√∂ld alap√∫ t√©ma, kaszin√≥ st√≠lusban
        palette = QPalette()

        # Z√∂ld h√°tt√©r a kaszin√≥ asztalhoz
        palette.setColor(QPalette.Window, QColor(53, 101, 77))
        palette.setColor(QPalette.WindowText, Qt.white)

        # Vil√°gosabb sz√∂veg a jobb olvashat√≥s√°g√©rt
        palette.setColor(QPalette.Text, Qt.white)
        palette.setColor(QPalette.ButtonText, Qt.white)

        # Panel h√°tt√©rsz√≠nek
        palette.setColor(QPalette.Base, QColor(27, 67, 50))

        self.setPalette(palette)

        # St√≠lus lap az eg√©sz alkalmaz√°shoz
        self.setStyleSheet("""
            QFrame {
                background-color: #1B4332;
                border-radius: 8px;
                border: 1px solid #2D6A4F;
            }

            QLabel {
                color: white;
            }

            QMainWindow {
                background-color: #355E4D;
            }

            QTabWidget::pane {
                border: 1px solid #2D6A4F;
                background-color: #1B4332;
                border-radius: 8px;
            }

            QTabBar::tab {
                background-color: #2D6A4F;
                color: white;
                border-bottom-left-radius: 4px;
                border-bottom-right-radius: 4px;
                padding: 6px 12px;
                margin-right: 2px;
            }

            QTabBar::tab:selected {
                background-color: #3B8C6E;
                font-weight: bold;
            }
        """)

    def place_bet(self):
        if self.player_money <= 0:
            QMessageBox.warning(self, "Figyelmeztet√©s", "Elfogyott a p√©nzed! √öj j√°t√©kot kell kezdened.")
            return

        # Zseton dial√≥gus megnyit√°sa
        self.open_chip_dialog()

    def open_chip_dialog(self):
        # Zseton dial√≥gus l√©trehoz√°sa
        dialog = QDialog(self)
        dialog.setWindowTitle("V√°lassz zsetonokat")
        dialog.setMinimumWidth(400)

        layout = QVBoxLayout(dialog)

        # Jelenlegi t√©t √©s egyenleg mutat√°sa
        info_label = QLabel(f"Egyenleg: {self.player_money} Ft\nJelenlegi t√©t: {self.current_bet} Ft")
        info_label.setAlignment(Qt.AlignCenter)
        info_label.setFont(QFont('Arial', 12))
        layout.addWidget(info_label)

        # Zsetonok
        chips_layout = QHBoxLayout()

        # K√ºl√∂nb√∂z≈ë √©rt√©k≈± zsetonok
        chip_values = [1000, 5000, 10000, 50000, 100000]
        chip_colors = ["#1E88E5", "#43A047", "#F9A825", "#D81B60", "#6D4C41"]

        # Zseton gombok
        for i, (value, color) in enumerate(zip(chip_values, chip_colors)):
            chip_button = QPushButton(f"{value}")
            chip_button.setFixedSize(80, 80)
            chip_button.setFont(QFont('Arial', 10, QFont.Bold))
            chip_button.setStyleSheet(f"""
                QPushButton {{
                    background-color: {color};
                    color: white;
                    border-radius: 40px;
                    border: 3px solid white;
                }}
                QPushButton:hover {{
                    background-color: {color};
                    border: 3px solid #FFEB3B;
                }}
                QPushButton:pressed {{
                    background-color: {color};
                    border: 3px solid #FFC107;
                }}
            """)
            chip_button.clicked.connect(lambda checked, v=value: self.add_chip(v, info_label))
            chips_layout.addWidget(chip_button)

        layout.addLayout(chips_layout)

        # T√∂rl√©s gomb
        clear_button = QPushButton("T√∂rl√©s")
        clear_button.setStyleSheet("""
            QPushButton {
                background-color: #F44336;
                color: white;
                padding: 8px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #D32F2F;
            }
        """)
        clear_button.clicked.connect(lambda: self.clear_chips(info_label))
        layout.addWidget(clear_button)

        # OK √©s M√©gse gombok
        button_layout = QHBoxLayout()
        ok_button = QPushButton("OK")
        ok_button.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                padding: 8px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #388E3C;
            }
        """)
        ok_button.clicked.connect(dialog.accept)

        cancel_button = QPushButton("M√©gse")
        cancel_button.setStyleSheet("""
            QPushButton {
                background-color: #9E9E9E;
                color: white;
                padding: 8px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #757575;
            }
        """)
        cancel_button.clicked.connect(dialog.reject)

        button_layout.addWidget(cancel_button)
        button_layout.addWidget(ok_button)
        layout.addLayout(button_layout)

        # Zseton ideiglenes √©rt√©ke a dial√≥gusban
        self.temp_bet = self.current_bet

        # Dial√≥gus megjelen√≠t√©se
        result = dialog.exec_()

        # Ha az OK-ra kattintottak
        if result == QDialog.Accepted and self.temp_bet > 0:
            self.current_bet = self.temp_bet
            self.player_money -= self.current_bet
            self.update_money_labels()
            self.bet_button.setEnabled(False)
            self.deal_button.setEnabled(True)
            self.statusBar().showMessage("Kattints az 'Oszt√°s' gombra a j√°t√©k kezd√©s√©hez!")

    def add_chip(self, value, info_label):
        if value <= self.player_money:
            self.temp_bet += value
            info_label.setText(f"Egyenleg: {self.player_money} Ft\nJelenlegi t√©t: {self.temp_bet} Ft")

    def clear_chips(self, info_label):
        self.temp_bet = 0
        info_label.setText(f"Egyenleg: {self.player_money} Ft\nJelenlegi t√©t: {self.temp_bet} Ft")

    def update_money_labels(self):
        self.money_label.setText(f"P√©nz: {self.player_money} Ft")
        self.bet_label.setText(f"T√©t: {self.current_bet} Ft")

    def deal_cards(self):
        # √öj j√°t√©k kezd√©se
        self.dealer_widget.clear()
        self.dealer_hand = self.dealer_widget.hand

        # J√°t√©kos k√©zhez t√©t hozz√°ad√°sa
        current_hand = self.player_hands[0]
        current_hand.hand.bet = self.current_bet
        current_hand.bet_label.setText(f"T√©t: {self.current_bet} Ft")

        # Kezd≈ë lapok oszt√°sa
        current_hand.hand.add_card(self.deck.deal())
        self.dealer_hand.add_card(self.deck.deal())
        current_hand.hand.add_card(self.deck.deal())
        self.dealer_hand.add_card(self.deck.deal())

        # UI friss√≠t√©se
        current_hand.update_display()
        self.dealer_widget.update_display()

        # Gomb √°llapotok be√°ll√≠t√°sa
        self.deal_button.setEnabled(False)
        current_hand.hit_button.setEnabled(True)
        current_hand.stand_button.setEnabled(True)

        # Friss√≠tj√ºk a dupla √©s split gombokat
        current_hand.update_buttons()

        # Ellen≈ërizz√ºk, van-e blackjack
        if current_hand.hand.is_blackjack():
            self.stand(0)  # Automatikusan meg√°llunk blackjack eset√©n

        # Akt√≠v k√©z be√°ll√≠t√°sa
        self.active_hand_index = 0
        self.hands_tab.setCurrentIndex(0)

        self.statusBar().showMessage("K√©rsz m√©g lapot, vagy meg√°llsz?")

    def hit(self, hand_index):
        # Ellen≈ërizz√ºk, hogy a megfelel≈ë k√©z akt√≠v-e
        if hand_index != self.active_hand_index or not self.player_hands[hand_index].hand.is_active:
            return

        # J√°t√©kos lapot k√©r
        current_hand = self.player_hands[hand_index]
        current_hand.hand.add_card(self.deck.deal())
        current_hand.update_display()

        # Dupla eset√©n automatikusan meg√°ll
        if current_hand.hand.doubled:
            self.stand(hand_index)
            return

        # Ellen≈ërizz√ºk, hogy t√∫ll√©pt√ºk-e a 21-et
        if current_hand.hand.calculate_value() > 21:
            current_hand.hand.is_active = False
            current_hand.update_buttons()

            # K√∂vetkez≈ë k√©zre l√©p√©s vagy j√°t√©k v√©ge
            self.move_to_next_hand()

    def stand(self, hand_index):
        # Ellen≈ërizz√ºk, hogy a megfelel≈ë k√©z akt√≠v-e
        if hand_index != self.active_hand_index or not self.player_hands[hand_index].hand.is_active:
            return

        # A j√°t√©kos meg√°ll
        current_hand = self.player_hands[hand_index]
        current_hand.hand.is_active = False
        current_hand.update_buttons()

        # K√∂vetkez≈ë k√©zre l√©p√©s vagy j√°t√©k v√©ge
        self.move_to_next_hand()

    def double_down(self, hand_index):
        # Ellen≈ërizz√ºk, hogy a megfelel≈ë k√©z akt√≠v-e
        if hand_index != self.active_hand_index or not self.player_hands[hand_index].hand.is_active:
            return

        current_hand = self.player_hands[hand_index]

        # Csak akkor dupl√°zhatunk, ha van el√©g p√©nz
        if self.player_money < current_hand.hand.bet:
            QMessageBox.warning(self, "Figyelmeztet√©s", "Nincs el√©g p√©nzed a dupl√°z√°shoz!")
            return

        # T√©t dupl√°z√°sa
        self.player_money -= current_hand.hand.bet
        current_hand.hand.bet *= 2
        current_hand.bet_label.setText(f"T√©t: {current_hand.hand.bet} Ft")
        self.update_money_labels()

        # Dupl√°z√°s jelz√©se
        current_hand.hand.doubled = True

        # Egy lap h√∫z√°sa √©s automatikus meg√°ll√°s
        self.hit(hand_index)

    def split(self, hand_index):
        # Ellen≈ërizz√ºk, hogy a megfelel≈ë k√©z akt√≠v-e
        if hand_index != self.active_hand_index or not self.player_hands[hand_index].hand.is_active:
            return

        current_hand = self.player_hands[hand_index]

        # Ellen≈ërizz√ºk, hogy lehet-e splittelni
        if not current_hand.hand.can_split():
            return

        # Ellen≈ërizz√ºk, hogy van-e el√©g p√©nz
        if self.player_money < current_hand.hand.bet:
            QMessageBox.warning(self, "Figyelmeztet√©s", "Nincs el√©g p√©nzed a split-hez!")
            return

        # A m√°sodik lap kiv√©tele
        second_card = current_hand.hand.cards.pop()

        # √öj k√©z l√©trehoz√°sa
        new_hand = self.create_new_hand()

        # T√©t levon√°sa a j√°t√©kos p√©nz√©b≈ël
        self.player_money -= current_hand.hand.bet
        new_hand.hand.bet = current_hand.hand.bet
        new_hand.bet_label.setText(f"T√©t: {new_hand.hand.bet} Ft")
        self.update_money_labels()

        # K√°rtya hozz√°ad√°sa az √∫j k√©zhez
        new_hand.hand.add_card(second_card)

        # K√°rty√°k kioszt√°sa mindk√©t k√©zhez
        current_hand.hand.add_card(self.deck.deal())
        new_hand.hand.add_card(self.deck.deal())

        # UI friss√≠t√©se
        current_hand.update_display()
        new_hand.update_display()

        # Ellen≈ërizz√ºk a split ut√°ni k√°rty√°k √©rt√©k√©t
        # Ha √°szokat splittelt√ºnk, automatikusan meg√°llunk
        if current_hand.hand.cards[0].value == 'A':
            current_hand.hand.is_active = False
            new_hand.hand.is_active = False
            self.move_to_next_hand()
        else:
            # Gombok friss√≠t√©se
            current_hand.update_buttons()
            new_hand.update_buttons()

    def move_to_next_hand(self):
        # Ellen≈ërizz√ºk, hogy van-e m√©g akt√≠v k√©z
        next_hand_index = self.active_hand_index + 1

        if next_hand_index < len(self.player_hands):
            # K√∂vetkez≈ë k√©zre l√©p√©s
            self.active_hand_index = next_hand_index
            self.hands_tab.setCurrentIndex(next_hand_index)

            # Gombok friss√≠t√©se
            self.player_hands[next_hand_index].update_buttons()
        else:
            # Nincs t√∂bb k√©z, az oszt√≥ k√∂vetkezik
            self.play_dealer_hand()

    def play_dealer_hand(self):
        # Felfedni az oszt√≥ m√°sodik lapj√°t
        self.dealer_widget.update_display(reveal_dealer=True)

        # Ellen≈ërizz√ºk, hogy minden j√°t√©kos k√©z bes√ºlt-e
        all_busted = True
        for hand_widget in self.player_hands:
            if hand_widget.hand.calculate_value() <= 21:
                all_busted = False
                break

        # Ha minden k√©z bes√ºlt, az oszt√≥ nem h√∫z
        if all_busted:
            self.check_winners()
            return

        # Az oszt√≥ h√∫z lapokat, am√≠g a keze √©rt√©ke kevesebb mint 17
        dealer_value = self.dealer_hand.calculate_value()

        def dealer_draw():
            nonlocal dealer_value
            if dealer_value < 17:
                self.dealer_hand.add_card(self.deck.deal())
                dealer_value = self.dealer_hand.calculate_value()
                self.dealer_widget.update_display(reveal_dealer=True)

                if dealer_value < 17:
                    QTimer.singleShot(1000, dealer_draw)  # K√©sleltetett h√∫z√°s anim√°ci√≥hoz
                else:
                    self.check_winners()
            else:
                self.check_winners()

        if dealer_value < 17:
            QTimer.singleShot(1000, dealer_draw)
        else:
            self.check_winners()

    def check_winners(self):
        dealer_value = self.dealer_hand.calculate_value()
        dealer_blackjack = self.dealer_hand.is_blackjack()
        dealer_busted = dealer_value > 21

        results = []
        total_win = 0

        # Ellen≈ërizz√ºk minden k√©z eredm√©ny√©t
        for i, hand_widget in enumerate(self.player_hands):
            hand = hand_widget.hand
            hand_value = hand.calculate_value()
            hand_busted = hand_value > 21
            hand_blackjack = hand.is_blackjack()

            # Nyerem√©ny kisz√°m√≠t√°sa
            result = ""
            win_amount = 0

            if hand_busted:
                result = f"K√©z {i+1}: Vesztett√©l! T√∫ll√©pted a 21-et."
            elif dealer_busted:
                result = f"K√©z {i+1}: Nyert√©l! Az oszt√≥ t√∫ll√©pte a 21-et."
                win_amount = hand.bet * 2
            elif hand_blackjack and not dealer_blackjack:
                result = f"K√©z {i+1}: Nyert√©l! Blackjack!"
                win_amount = int(hand.bet * 2.5)  # 3:2 kifizet√©s blackjack-re
            elif dealer_blackjack and not hand_blackjack:
                result = f"K√©z {i+1}: Vesztett√©l! Az oszt√≥nak Blackjack-je van."
            elif hand_blackjack and dealer_blackjack:
                result = f"K√©z {i+1}: D√∂ntetlen! Mindk√©t f√©lnek Blackjack-je van."
                win_amount = hand.bet  # Visszakapja a t√©tet
            elif hand_value > dealer_value:
                result = f"K√©z {i+1}: Nyert√©l! A lapjaid √©rt√©ke magasabb."
                win_amount = hand.bet * 2
            elif dealer_value > hand_value:
                result = f"K√©z {i+1}: Vesztett√©l! Az oszt√≥ lapjainak √©rt√©ke magasabb."
            else:
                result = f"K√©z {i+1}: D√∂ntetlen! Ugyanaz az √©rt√©k."
                win_amount = hand.bet  # Visszakapja a t√©tet

            # Nyerem√©ny hozz√°ad√°sa
            total_win += win_amount
            results.append(result)

        # Eredm√©nyek megjelen√≠t√©se
        results_text = "<br>".join(results)
        self.result_label.setText(f"<html>{results_text}</html>")

        # √ñsszes nyerem√©ny hozz√°ad√°sa
        self.player_money += total_win
        self.update_money_labels()

        # Gombok friss√≠t√©se
        self.bet_button.setEnabled(True)
        self.deal_button.setEnabled(False)

        # St√°tusz friss√≠t√©se
        self.statusBar().showMessage("J√°t√©k v√©ge. Helyezz √∫j t√©tet vagy kezdj √∫j j√°t√©kot!")

        # Ha elfogyott a p√©nz
        if self.player_money <= 0:
            QMessageBox.information(self, "J√°t√©k v√©ge",
                                   "Elfogyott a p√©nzed! √öj j√°t√©kot kell kezdened.")
            self.bet_button.setEnabled(False)

    def new_game(self):
        reply = QMessageBox.question(self, "√öj j√°t√©k",
                                    "Biztosan √∫j j√°t√©kot szeretn√©l kezdeni?",
                                    QMessageBox.Yes | QMessageBox.No)

        if reply == QMessageBox.Yes:
            # Kezek t√∂rl√©se
            while self.hands_tab.count() > 0:
                self.hands_tab.removeTab(0)

            # V√°ltoz√≥k alaphelyzetbe √°ll√≠t√°sa
            self.player_hands = []
            self.deck = Deck()
            self.dealer_widget.clear()
            self.game_over = False
            self.current_bet = 0
            self.temp_bet = 0
            self.active_hand_index = 0

            # Els≈ë k√©z l√©trehoz√°sa
            self.create_new_hand()

            # UI friss√≠t√©se
            self.update_money_labels()
            self.result_label.setText("")

            # Gombok vissza√°ll√≠t√°sa
            self.bet_button.setEnabled(True)
            self.deal_button.setEnabled(False)

            self.statusBar().showMessage("√öj j√°t√©k kezd≈ëd√∂tt! Helyezz t√©tet a kezd√©shez.")

if __name__ == "__main__":
    try:
        print("Program ind√≠t√°sa...")
        app = QApplication(sys.argv)
        print("QApplication l√©trehozva")
        window = BlackjackGame()
        print("BlackjackGame l√©trehozva")
        window.show()
        print("Ablak megjelen√≠tve")
        sys.exit(app.exec_())
    except Exception as e:
        print(f"Hiba t√∂rt√©nt: {e}")
        import traceback
        traceback.print_exc()

